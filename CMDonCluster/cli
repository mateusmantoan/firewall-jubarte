#!/bin/bash

IMAGESNORT="mateusmantoan/snort"
IMAGESQUID="mateusmantoan/squid"
IMAGETCPDUMP="mateusmantoan/tcpdump"
IMAGENMAP="mateusmantoan/nmap"
DEFAULTPASS="toor"
INT0="wlp3s0"
INT1="eth1"

clear
alias iptables="/sbin/iptables"

touch /etc/jubarte/status
touch /etc/jubarte/var/dumpall

#if [ cat "/etc/jubarte/status" != 0]

function INICIO () {
    clear
    echo "   ___       _                _        ______ _                        _ _ "
    echo "  |_  |     | |              | |       |  ___(_)                      | | |"
    echo "    | |_   _| |__   __ _ _ __| |_ ___  | |_   _ _ __ _____      ____ _| | |"
    echo "    | | | | | '_ \ / _| | |__| __/ _ \ |  _| | | |__/ _ \ \ /\ / / _| | | |"
    echo "/\__/ / |_| | |_) | (_| | |  | ||  __/ | |   | | | |  __/\ V  V / (_| | | |"
    echo "\____/ \__,_|_.__/ \__,_|_|   \__\___| \_|   |_|_|  \___| \_/\_/ \__,_|_|_|"
    echo
    echo COMMAND LINE INTERFACE
    echo
    echo Type 1 to manage hosts
    echo Type 2 to manage iptaples rules
    echo Type 3 to configure snort
    echo Type 4 to configure squid
    echo Type 5 to use tcpdump
    echo Type 6 to use nmap
    echo
    echo Type 0 to close CLI
    read option
    
    if [ $option = 1 ]
    then
        HOSTS
    elif [ $option = 2 ]
    then
        IPTABLES
    elif [ $option = 3 ]
    then
        SNORT
    elif [ $option = 4 ]
    then
        SQUID
    elif [ $option = 5 ]
    then
        TCPDUMP
    elif [ $option = 6 ]
    then
        NMAP
    elif [ $option = 0 ]
    then
        clear
        exit 0    
    else
        echo invalid option, try again
        sleep 2
        INICIO
    fi
}


#HOSTS FUNCTIONS

function HOSTS () {
    clear
    echo MANAGER HOSTS
    echo Actual hosts:
    cat /etc/jubarte/hostsfile
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    echo Type 1 to include hosts
    echo Type 2 to remove hosts
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        HOSTS_ADICIONAR
    elif [ $option = 2 ]
    then
        HOSTS_REMOVER
    elif [ $option = 0 ]
    then
        INICIO
    else
        echo invalid option, try again
        sleep 1
        HOSTS
    fi
}

function HOSTS_ADICIONAR () {
    echo Type the new IP
    echo Type 9 to back to HOSTS MENU
    read IP
    ipvalido=$(echo $IP | egrep '^(([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$')
    if [ $IP = 9 ]
    then
        HOSTS
    elif [ "$ipvalido" != "" ]
        then
        JOIN_TOKEN=`docker swarm join-token manager | grep swarm`
        sshpass -p "${DEFAULTPASS}" ssh root@$IP "$JOIN_TOKEN"
        sshpass -p "${DEFAULTPASS}" ssh root@$IP "iptables-restore < /etc/jubarte/iptables-actual"
        sshpass -p "${DEFAULTPASS}" ssh root@$IP "rm -rf /etc/jubarte"
        sshpass -p "${DEFAULTPASS}" scp -r /etc/jubarte root@$IP:/etc/
        for server in $(cat /etc/jubarte/hostsfile)
        do
            sshpass -p "${DEFAULTPASS}" ssh root@$server "echo $IP >> /etc/jubarte/hostsfile"
            done
        echo IP included on cluster
    else
        echo Invalid IP, verify again
        sleep 1
        HOSTS_ADICIONAR
    fi    
}

function HOSTS_REMOVER () {
    echo Type the IP will be removed
    echo Type 9 to back to HOSTS MENU
    read IP
    ipvalido=$(echo $IP | egrep '^(([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$')
    if [ $IP = 9 ]
    then
        HOSTS
    elif [ "$ipvalido" != "" ]
        then
        for server in $(cat /etc/jubarte/hostsfile)
        do
            sshpass -p "${DEFAULTPASS}" ssh root@$server "sed -i /^$IP/d /etc/jubarte/hostsfile"
            done
        echo IP removed of cluster
    else
        echo Invalid IP, verify again
        echo 
        HOSTS_REMOVER
    fi    
}


function WAAAAIT () {
    for counter in {1..5}; do echo .; sleep 0.5; done
}


#IPTABLES FUNCTIONS

function IPTABLES () {
    clear
    echo IPTABLES MANAGER
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    echo Type 1 to add rules
    echo Type 2 to remove rules
    echo Type 3 to show actual rules
    echo Type 4 to reset rules
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        IPTABLES_ADDREGRAS
    elif [ $option = 2 ]
    then
        IPTABLES_RMREGRAS
    elif [ $option = 3 ]
    then
        IPTABLES_VERREGRAS
    elif [ $option = 4 ]
    then
        IPTABLES_ZERARREGRAS
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        sleep 1
        IPTABLES
    fi
}

function IPTABLES_ADDREGRAS () {
    clear
    echo Type the rule to add on cluster
    echo Type 9 to back to iptables menu
    read RULE
    if [ $RULE = 9 ]
    then
        IPTABLES
    else
    for server in $(cat /etc/jubarte/hostsfile)
    do
        sshpass -p "${DEFAULTPASS}" ssh root@$server "$RULE"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "/sbin/iptables-save >> /etc/jubarte/iptables-actual_TEMP"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "rm /etc/jubarte/iptables-actual"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "mv /etc/jubarte/iptables-actual_TEMP /etc/jubarte/iptables-actual"
        done
        
    echo rule included on cluster
    sleep 1
    fi
    IPTABLES
}

function IPTABLES_RMREGRAS () {
    clear
    echo Type the rule to remove of cluster
    echo Type 9 to back to iptables menu
    read RULE
    if [ $RULE = 9 ]
    then
        IPTABLES
    else
    for server in $(cat /etc/jubarte/hostsfile)
    do
        sshpass -p "${DEFAULTPASS}" ssh root@$server "$RULE"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "iptables-save >> /etc/jubarte/iptables-actual_TEMP"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "rm /etc/jubarte/iptables-actual"
        sshpass -p "${DEFAULTPASS}" ssh root@$server "mv /etc/jubarte/iptables-actual_TEMP /etc/jubarte/iptables-actual"
        done
    echo rule removed of cluster
    sleep 1
    fi
    IPTABLES
}

function IPTABLES_VERREGRAS () {
    clear
    iptables -L
    echo
    echo
    echo Type ENTER to back to iptables menu
    read RULE
    IPTABLES
}

function IPTABLES_ZERARREGRAS () {
    clear
    iptables-restore < /etc/jubarte/iptables-clean
    iptables -F
    iptables -P INPUT ACCEPT
    iptables -P OUTPUT ACCEPT
    iptables -P FORWARD ACCEPT
    echo 
    echo IPtables rules restored
    echo
    echo Type ENTER to back to iptables menu
    read RULE
    IPTABLES
}


#FUNCTIONS TCPDUMP

function TCPDUMP () {
    clear
    echo TCPDUMP OPTIONS
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    echo Type 1 to sniff cluster traffic now
    echo Type 2 to create sniff rules
    echo Type 3 to see the actual rules
    echo Type 4 to remove sniff rules
    echo Type 0 to back start menu
    echo
    read option
    
    if [ $option = 1 ]
    then
        TCPDUMP_SNIFF_NOW
    elif [ $option = 2 ]
    then
        TCPDUMP_SNIFF_RULES
    elif [ $option = 3 ]
    then
        TCPDUMP_SEE_RULES
    elif [ $option = 4 ]
    then
        TCPDUMP_REMOVE_RULES
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        sleep 1
        TCPDUMP
    fi 
}

function TCPDUMP_SNIFF_NOW () {
    echo Type the tcpdump command
    echo *the interfaces of firewall are $INT0 and $INT1
    echo **Stop capture with Ctrl+C
    read TCPDUMPCMD
    docker run --net host --rm ${IMAGETCPDUMP} ${TCPDUMPCMD}
    echo
    echo
    echo
    echo Type enter to back
    clear
    TCPDUMP    
}

function TCPDUMP_SNIFF_RULES () {
    clear
    echo "Type the name of rule (one string, no spaces)"
    read NAME
    TCPDUMPRULENAME=`echo "$NAME" | sed "s, ,,g"`
    
    echo Type the tcpdump command
    echo *the interfaces of firewall are ${INT0} and ${INT1}
    read TCPDUMPCMD
    echo "$TCPDUMPRULENAME | $TCPDUMPCMD" >> /etc/jubarte/var/tcpdumprules
    docker run -itd --restart always --net host --name ${TCPDUMPRULENAME} --volume /etc/jubarte/log/tcpdump/:/root/logs/tcpdump/ ${IMAGETCPDUMP} ${TCPDUMPCMD} -w /root/logs/tcpdump/${TCPDUMPRULENAME}.pcap
    TCPDUMP
    
}

function TCPDUMP_SEE_RULES () {
    clear
    echo -n "Actual rules"
    echo
    docker ps -a --no-trunc -f ancestor=${IMAGETCPDUMP} --format "table {{.Names}}\t{{.Command}}"
    echo 
    echo Press [ENTER] to back TCPDUMP menu
    read 
    TCPDUMP
}

function TCPDUMP_REMOVE_RULES () {
    echo Type the name of rule to be removed
    read NAME
    docker rm -f ${NAME}
    TCPDUMP
}

#FUNCTIONS NMAP

function NMAP () {
    clear
    echo NMAP OPTIONS
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    echo Type 1 to scan cluster ports now
  #  echo Type 2 to create port scan rules
  #  echo Type 3 to see the actual rules
  #  echo Type 4 to remove port scan rules
    echo Type 0 to back NMAP options
    read option
    
    if [ $option = 1 ]
    then
        NMAP_SNIFF_NOW
    elif [ $option = 2 ]
    then
        NMAP_SNIFF_RULES
    elif [ $option = 3 ]
    then
        NMAP_SEE_RULES
    elif [ $option = 4 ]
    then
        NMAP_REMOVE_RULES
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        sleep 1
        NMAP
    fi 
}

function NMAP_SNIFF_NOW () {
    echo Type the NMAP command
    echo *the interfaces of firewall are $INT0 and $INT1
    echo **Stop capture with Ctrl+C
    read NMAPCMD
    docker run -t --net host --name nmapqweqwe ${IMAGENMAP} ${NMAPCMD} 
    echo
    echo
    echo
    echo Type enter to back
    clear
    NMAP    
}

function NMAP_SNIFF_RULES () {
    clear
    echo "Type the name of rule (one string, no spaces)"
    read NAME
    NMAPRULENAME=`echo "$NAME" | sed "s, ,,g"`
    
    echo Type the NMAP command
    echo *the interfaces of firewall are ${INT0} and ${INT1}
    read NMAPCMD
    echo "frequency of scan (in seconds)"
    read FREQUENCY
    docker run -itd --restart always --net host --name ${NMAPRULENAME} --volume /etc/jubarte/log/nmap/:/root/logs/nmap/ ${IMAGENMAP} ${NMAPCMD} -o /root/logs/nmap/${NMAPRULENAME}/$(date +%d-%m-%Y-%R-%S)
    NMAP
    
}

function NMAP_SEE_RULES () {
    clear
    echo "Actual rules"
    echo
    docker ps -a --no-trunc -f ancestor=${IMAGENMAP} --format "table {{.Names}}\t{{.Command}}"
    echo 
    echo Press [ENTER] to back NMAP menu
    read 
    NMAP
}

function NMAP_REMOVE_RULES () {
    echo Type the name of rule to be removed
    read NAME
    docker rm -f ${NAME}
    NMAP
}


#SNORT FUNCTIONS

function SNORT () {
    clear
    echo SNORT
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    if [ `cat /etc/jubarte/snort-status` != 1 ]
    then
    SNORT_INSTALAR    
    fi
    echo Type 1 to 
    echo Type 2 to 
    echo Type 3 to 
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        SNORT_
    elif [ $option = 2 ]
    then
        SNORT_
    elif [ $option = 3 ]
    then
        SNORT_
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        sleep 1
        SNORT
    fi
}

function SNORT_INSTALAR () {
    echo Type 1 to install snort on cluster
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        docker service create -td --network host --mode global --name snort $IMAGESNORT
        echo "1" > /etc/jubarte/snort-status
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        WAAAAIT
        SNORT_INSTALAR
    fi
}
function SQUID () {
    clear
    echo SQUID
    echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
    if [ `` != 1 ]
    then
    SQUID_INSTALAR    
    fi
    echo Type 1 to 
    echo Type 2 to 
    echo Type 3 to 
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        SNORT_
    elif [ $option = 2 ]
    then
        SNORT_
    elif [ $option = 3 ]
    then
        SNORT_
    elif [ $option = 0 ]
    then
        INICIO    
    else
        echo invalid option, try again
        sleep 1
        SNORT
    fi
}

function SQUID_INSTALAR () {
    echo Type 1 to install the squid on cluster
    echo Type 0 to back
    read option
    if [ $option = 1 ]
    then
        docker service create -td --network host --mode global --name snort $IMAGESQUID
        echo "1" > /etc/jubarte/squid-status
    elif [ $option = 0 ]
    then
        INICIO
    else
        echo invalid option, try again
        sleep 1
        SQUID_INSTALAR
    fi 

}

`docker swarm init --advertise-addr $(hostname -I | cut -d " " -f 1)`


INICIO
